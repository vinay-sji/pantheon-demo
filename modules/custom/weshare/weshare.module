<?php
use \Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element\Weight;
use \Drupal\taxonomy\Entity\Term;
use \Drupal\node\NodeInterface;
use Drupal\node\Entity\Node;
use Drupal\user\Entity\User;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\Core\Url;

/**
 * Implements hook_theme_suggestions_alter
 */
function weshare_theme_suggestions_alter(array &$suggestions, array $variables)
{

    if (isset($variables['element']) && isset($variables['element']['#type']) && $variables['element']['#type'] == 'form') {
        $original_theme_hook = $variables['theme_hook_original'];

        $suggestions[] = $original_theme_hook . '__' . str_replace('-', '_', $variables['element']['#id']);
    }

    return $suggestions;
 
}


//updating the agency select all label
function weshare_form_alter(array &$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
    $user = \Drupal::currentUser();
    $roles = $user->getRoles();

    $users =\Drupal::entityTypeManager()->getStorage('user')->load($user->id());
    $user = $users->get('field_agency_company')->getValue();
    $agency_id = $user[0]['target_id'];
    //To get agency name.
    $usern = $users->get('field_agency_company')->getString();
    $term = $usern;
    $term_name = Term::load($term);
    if(($form_id == 'node_needs_form') || ($form_id == 'node_needs_edit_form')) {   
        $agency_name=$term_name->getName();
        $form['field_created_byagency_need'] = [
            '#value' => $agency_name,
            '#type' => 'textfield',
            '#title' => 'Created by Agency',
            '#weight' =>27,
            '#disabled' =>TRUE,
        ];
        // $form['field_created_by_agency']['widget'][0]['value']['#default_value'] = $agency_id;

        $form['group_classification']['checkallfield-agencies-list']['#title']= t('Check / Uncheck All Agencies');

        $form['back'] = array(
            '#type' => 'button',
            '#value' => t('Back'),
            '#id' =>'n1',
            '#weight' => 35,
            '#attributes' => array(
              'onclick' => 'window.history.back();return false;',
            ),
            $form['#attached']['library'][] = 'weshare/weshare_js'
        );
        $form['field_created_by_agency']=[
            '#access' =>FALSE,
        ];
        // remove "select agency" from agency list for needs
        // This will remove the first term from agency vocabulary
        unset($form['field_agencies_list']['widget']['#options'][current(array_keys($form['field_agencies_list']['widget']['#options']))]);
    }

    if ($form_id == 'node_needs_form') {
        if (in_array("agency_admin", $roles)) {
            $form['field_approved']['widget']['value']['#default_value'] = true;
            $form['field_approved']['widget']['value']['#disabled'] = true;
            $form['field_rejected']['widget']['value']['#default_value'] = false;
            $form['field_rejected']['widget']['value']['#disabled'] = true;
        }
        if (in_array("worker", $roles)) {
            // set field_approved as false and send all needs created by worker for approval
            $form['field_approved']['widget']['value']['#default_value'] = false;
            $form['field_rejected']['widget']['value']['#default_value'] = false;
        }
        // submit handler to trigger only after need creation
        $form['actions']['submit']['#submit'][] = '_weshare_node_needs_form_submit';
    }

    if(($form_id == 'node_services_form') || ($form_id == 'node_services_edit_form')) {
        $agency_name=$term_name->getName();
        $form['back'] = array(
            '#type' => 'button',
            '#id' =>'s1',
            '#value' => t('Back'),
            '#weight' => 35,
            '#attributes' => array(
              'onclick' => 'window.history.back();return false;',
            ),
            $form['#attached']['library'][] = 'weshare/weshare_js'
        );
        $form['field_created_byagency_support'] = [
            '#value' => $agency_name,
            '#type' => 'textfield',
            '#title' => 'Created by Agency',
            '#weight' =>27,
            '#disabled' => TRUE,
        ];
        $form['field_created_by_agency_support']=[
            '#access' =>FALSE,
        ];
        // $form['field_created_by_agency_support']['widget'][0]['value']['#default_value'] = $agency_id;

        $form['group_classification']['checkallfield-service-agencies']['#title']= t('Check / Uncheck All Agencies');

            // code to show/hide user field

            if (in_array($form_id,['node_services_form']) || ($form_id == 'node_services_edit_form')) {
                $form['field_protection_settings_servi']['#states'] = [
                    'visible'=> [
                        ':input[name="field_protected[value]"]' => ['checked' => TRUE],
                    ]
                ];
    
            }
        
        // remove "select agency" from agency list for services
        // This will remove the first term from agency vocabulary
        unset($form['field_service_agencies']['widget']['#options'][current(array_keys($form['field_service_agencies']['widget']['#options']))]);
    }

    if ($form_id == 'node_services_form') {
        if (in_array("agency_admin", $roles)) {
            $form['field_approved_service']['widget']['value']['#default_value'] = true;
            $form['field_approved_service']['widget']['value']['#disabled'] = true;
            $form['field_rejected']['widget']['value']['#default_value'] = false;
            $form['field_rejected']['widget']['value']['#disabled'] = true;
        }
        if (in_array("worker", $roles)) {
            // set field_approved_service as false and send all services created by worker for approval
            $form['field_approved_service']['widget']['value']['#default_value'] = false;
            $form['field_rejected']['widget']['value']['#default_value'] = false;
        }
        // submit handler to trigger only after service creation
        $form['actions']['submit']['#submit'][] = '_weshare_node_services_form_submit';
    }

//  fetch user name $ email
    if($form_id =='webform_submission_4weshare_assessment_form_add_form') {
       $logged_in = \Drupal::currentUser();
       if($logged_in)
        {    
            $name = $logged_in->getDisplayName(); 
            $user_mail = $logged_in->getEmail();  
            $form['elements']['flexbox']['name']['#default_value']= $name; 
            $form['elements']['flexbox']['email']['#default_value']= $user_mail;  
       
        }
    }

    // for support form
    if($form_id =='webform_submission_support_assessment_form_add_form') {
        $logged_in = \Drupal::currentUser();
        if($logged_in)
         {    
             $name = $logged_in->getDisplayName(); 
             $user_mail = $logged_in->getEmail();  
             $form['elements']['flexbox']['name']['#default_value']= $name; 
             $form['elements']['flexbox']['email']['#default_value']= $user_mail;  
        
         }
    }

    $current_user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
    $role = $current_user->getRoles();
    // $role = \Drupal::currentUser()->getRoles();
    if (($form_id == 'user_form') && (in_array('worker', $role))) {
        $form['field_agency_company']['#disabled'] = TRUE;
        $form['field_create_agency_or_company']['#access'] = FALSE;
    }

    // Pre-populate agency name in user edit form
    if (($form_id == 'user_form') && (in_array('agency_admin', $role))) {        
        $agency = $current_user->get('field_agency_company')->getValue();
        $form['field_agency_company']['widget']['#default_value'] = $agency[0]['target_id'];
        $form['account']['status']['#disabled'] = TRUE;
        $form['field_agency_company']['#disabled'] = TRUE;
        $form['field_create_agency_or_company']['#access'] = FALSE;
    }

    if($form_id == 'node_needs_form') {
        // var_dump($form['#fieldgroups']);
        $group_id = 'group_need_properties';
        $form[$group_id]['field_needed'] = [
            '#title' => 'Needed',
            '#type' => 'date',
            '#date_format' => 'Y-m-d',
            '#date_year_range' => '-80:0',
            '#weight' => 6,
            '#group' => $group_id,
            '#attributes' => [
                'min' =>  \Drupal::service('date.formatter')->format(REQUEST_TIME, 'custom', 'Y-m-d'),
            ],
        ];
    }

    if($form_id == 'private_message_add_form') {
        $nid = \Drupal::request()->query->get('nid');
        $form['field_title']['widget']['#default_value'] = $nid;

        $current_user = \Drupal::currentUser()->id();

        if($nid == null) {

            $url = \Drupal::request()->getRequestUri();
            $pos = strrpos($url, '/');
            $id = $pos === false ? $url : substr($url, $pos + 1);

            // Query to get the last private message id.
            $query = \Drupal::database()->select('private_message_thread__private_messages', 'pmt')
            ->fields('pmt')
            ->condition('pmt.entity_id', $id, '=')
            ->orderBy('pmt.private_messages_target_id', 'DESC')
            ->range(0,1);

            $results = $query->execute()->fetchAll();
            $entityId = $results[0]->private_messages_target_id;

            // Set the title for the inbox title field.
            $queryForEntityId = \Drupal::database()->select('private_message__field_title', 'pmtitle')
            ->fields('pmtitle')
            ->condition('pmtitle.entity_id', $entityId, '=');

            $resultsForEntityId = $queryForEntityId->execute()->fetchAll();

            $form['field_title']['widget']['#default_value'] = $resultsForEntityId[0]->field_title_target_id;


            // Displaying the titles ie needs and support based on the threat messager.
            $queryForThreadUser = \Drupal::database()->select('pm_thread_history', 'pth')
            ->fields('pth')
            ->condition('pth.thread_id', $id, '=')
            ->orderBy('pth.uid', 'DESC');

            $resultsForThreadUser = $queryForThreadUser->execute()->fetchAll();
            
            foreach ($resultsForThreadUser as $key => $value) {
                if ($value->uid != $current_user) {
                    $threadUser = $value->uid;
                }
            }

            foreach ($form['field_title']['widget']['#options']['Needs'] as $key => $value) {
                $needDetails = \Drupal::entityTypeManager()->getStorage('node')->load($key);
                $authorOfNeed = $needDetails->getOwnerID();

                if($threadUser != $authorOfNeed && $current_user != $authorOfNeed) {
                    unset($form['field_title']['widget']['#options']['Needs'][$key]);
                }
            }

            foreach ($form['field_title']['widget']['#options']['Support'] as $key => $value) {
                $supportDetails = \Drupal::entityTypeManager()->getStorage('node')->load($key);
                $authorOfSupport = $supportDetails->getOwnerID();

                if($threadUser != $authorOfSupport && $current_user != $authorOfSupport) {
                    unset($form['field_title']['widget']['#options']['Support'][$key]);
                }
            } 

        } 
        else {
            // Displaying the titles based on the the node owner.
            $node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
            $currentAuthor = $node->getOwnerID();

            foreach ($form['field_title']['widget']['#options']['Needs'] as $key => $value) {
                $needDetails = \Drupal::entityTypeManager()->getStorage('node')->load($key);
                $authorOfNeed = $needDetails->getOwnerID();

                if($currentAuthor != $authorOfNeed) {
                    unset($form['field_title']['widget']['#options']['Needs'][$key]);
                }
            }

            foreach ($form['field_title']['widget']['#options']['Support'] as $key => $value) {
                $supportDetails = \Drupal::entityTypeManager()->getStorage('node')->load($key);
                $authorOfSupport = $supportDetails->getOwnerID();

                if($currentAuthor != $authorOfSupport) {
                    unset($form['field_title']['widget']['#options']['Support'][$key]);
                }
            }

            $form['field_title']['widget']['#disabled'] = TRUE;
        }
    }
}


/**
 * Implement Hook for node insert
 */ 
// function weshare_node_insert(NodeInterface $node) {
//     if ($node->bundle() == 'needs') {
//         $current_cat_ids = array();
//         foreach ($node->field_categories->referencedEntities() as $term) {
//             $current_cat_ids[] = $term->id();
//         }
//         // find matching services
//         if (!empty($current_cat_ids)) {
//             $q = \Drupal::entityTypeManager()->getStorage('node')->getQuery();
//             $matching_node_ids = $q->condition('type', 'services')
//             ->condition('status', 1)
//             ->condition('field_service_category.entity:taxonomy_term.tid', $current_cat_ids, 'IN')
//             ->execute();

//             if (!empty($matching_node_ids)) {
//                 $matching_nodes = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($matching_node_ids);
//                 $users = array();
//                 foreach ($matching_nodes as $mn) {
//                     $users[] = $mn->getOwner();
//                 }

//                 //send notification to these users.
//                 // foreach ($users as $user) {
//                 if ((!empty($users))) {    
//                     $notificationService = \Drupal::service('notifications_widget.logger');
//                     $message ['content'] = 'The Need [node:title] is  created that matches your support area';
//                     $message['id'] =  $node->id();
//                     $message['bundle']  = 'needs';
//                     $message['content_link'] = "[node:url]"; 
//                     // $message ['content'] = $node->getOwner()->getAccountName();
//                     $notificationService->logNotification($message, 'create', $node);
//                 }
//                 else {
//                 }  
//             }
//         }
//     }
//     elseif ($node->bundle() == 'services') {
//         $current_cat_ids = array();
//         foreach ($node->field_service_category->referencedEntities() as $term) {
//             $current_cat_ids[] = $term->id();
//         }

//         // find matching needs
//         if (!empty($current_cat_ids)) {
//             $q = \Drupal::entityTypeManager()->getStorage('node')->getQuery();
//             $matching_node_ids = $q->condition('type', 'needs')
//             ->condition('status', 1)
//             ->condition('field_categories.entity:taxonomy_term.tid', $current_cat_ids, 'IN')
//             ->execute();

//             if (!empty($matching_node_ids)) {
//                 $matching_nodes = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($matching_node_ids);
//                 $users = array();
//                 foreach ($matching_nodes as $mn) {
//                     $users[] = $mn->getOwner();
//                 }

//                 //send notification to these users.
//                 if ((!empty($users))) {
//                 // foreach ($users as $user) {

//                     $notificationService = \Drupal::service('notifications_widget.logger');
//                     $message ['content'] = 'The Support [node:title] is  created that matches your need area';
//                     $message['id'] =  $node->id();
//                     $message['bundle']  = 'services';
//                     $message['content_link'] = "[node:url]"; 
//                     // $message ['content'] = $node->getOwner()->getAccountName();
//                     $notificationService->logNotification($message, 'create', $node);
//                 }
//                 else {
//                 } 
//             }

//         }
//     }
// }


/**
 * Submit handler to trigger only after need creation
 */
function _weshare_node_needs_form_submit(&$form, FormStateInterface $form_state) {
    $submitted_data = $form_state->getValues();
    $need_id = $submitted_data['nid'];
    $need = \Drupal\node\Entity\Node::load($need_id);

    // send notification for matching services only if the need is approved
    if ($need && $need->field_approved->value && $need->field_rejected->value == 0) {
        _weshare_services_notification($need);
    }

    if ($need && $need->field_approved->value == 0) {
        _weshare_send_approval_required_notification ($need, "needs");
    }
}


/**
 * Submit handler to trigger only after service creation
 */
function _weshare_node_services_form_submit(&$form, FormStateInterface $form_state) {
    $submitted_data = $form_state->getValues();
    $service_id = $submitted_data['nid'];
    $service = \Drupal\node\Entity\Node::load($service_id);

    // send notification for matching needs only if the service is approved
    if ($service && $service->field_approved_service->value && $service->field_rejected->value == 0) {
        _weshare_needs_notification($service);
    }

    if ($service && $service->field_approved_service->value == 0) {
        _weshare_send_approval_required_notification ($service, "services");
    }
}


/**
 * Implement hook update
 */
function weshare_node_update (NodeInterface $node) {
    if ($node->bundle() == 'needs') {
        if ($node->original->field_approved->value != $node->field_approved->value && $node->field_rejected->value == 0 && $node->field_approved->value == 1) {
            _weshare_send_approved_rejected_notification($node,"needs","approved");
            _weshare_services_notification($node);
        }
        if ($node->field_approved->value == 1 && $node->field_rejected->value == 0 && ($node->original->field_vibility->value != $node->field_vibility->value)) {
            _weshare_services_notification($node);
        }
        if ($node->original->field_rejected->value != $node->field_rejected->value && $node->field_rejected->value == 1 && $node->field_approved->value == 0) {
            _weshare_send_approved_rejected_notification($node,"needs","rejected");
        }
    }

    if ($node->bundle() == 'services') {
        if ($node->original->field_approved_service->value != $node->field_approved_service->value && $node->field_rejected->value == 0 && $node->field_approved_service->value == 1) {
            _weshare_send_approved_rejected_notification($node,"services","approved");
            _weshare_needs_notification($node);
        }
        if ($node->field_approved_service->value == 1 && $node->field_rejected->value == 0 && ($node->original->field_status->value != $node->field_status->value)) {
            _weshare_needs_notification($node);
        }
        if ($node->original->field_rejected->value != $node->field_rejected->value && $node->field_rejected->value == 1 && $node->field_approved_service->value == 0) {
            _weshare_send_approved_rejected_notification($node,"needs","rejected");
        }
    }
}


/**
 * Notification for matching support (services) after need is created/edited
 * Send notification to all matching support considering all scenarios
 * TODO: mention all scenarios here
 */
function _weshare_services_notification (NodeInterface $node) {
    if ($node->field_approved->value) {
        $referenced_categories = $node->field_categories->referencedEntities();

        if ($referenced_categories) {
            $target_category = end($node->field_categories->referencedEntities())->id();
            $target_agencies = $node->field_agencies_list->referencedEntities();

            if ($target_agencies) {
                $target_agency_ids = array();
                foreach ($target_agencies as $agency) {
                    array_push($target_agency_ids,$agency->id());
                }

                $serviceQuery = \Drupal::entityTypeManager()->getStorage('node')->getQuery();
                $matching_node_ids = $serviceQuery->condition('type', 'services')
                ->condition('status', 1)
                ->condition('field_approved_service', 1)
                ->condition('field_status', "Active")
                ->condition('field_service_category.entity:taxonomy_term.tid', $target_category, 'IN')
                ->condition('field_service_agencies', $target_agency_ids, 'IN')
                ->execute();

                $all_matching_services = \Drupal\node\Entity\Node::loadMultiple($matching_node_ids);

                if ($all_matching_services) {
                    $service_owners = array();
                    foreach ($all_matching_services as $service) {
                        array_push($service_owners,$service->getOwner()->id());
                    }
                    $service_owners = array_unique($service_owners);
                    foreach ($service_owners as $service_owner) {
                        $notificationService = \Drupal::service('notifications_widget.logger');
                        $message = array();
                        if ($node->field_vibility->value == "Pending") {
                            $message ['content'] = 'The Need [node:title] by [node:author] is Pending';
                        }elseif ($node->field_vibility->value == "Fullfilled") {
                            $message ['content'] = 'The Need [node:title]  is Fulfilled';
                        }else {
                            $message ['content'] = 'The Need [node:title] is created that matches your support area';
                        }
                        $message['id'] =  $node->id();
                        $message['bundle']  = 'needs';
                        $message['content_link'] = '[entity:url]';
                        $notificationService->logNotification($message, 'create', $node, $service_owner);
                    }
                }
            }
        }
    }
}


/**
 * Notification for matching needs after service is created/edited
 * Send notification to all matching needs considering all scenarios
 * TODO: mention all scenarios here
 */
function _weshare_needs_notification (NodeInterface $node) {
    if ($node->field_approved_service->value) {
        $referenced_categories = $node->field_service_category->referencedEntities();

        if ($referenced_categories) {
            $target_category = end($node->field_service_category->referencedEntities())->id();
            $target_agencies = $node->field_service_agencies->referencedEntities();

            if ($target_agencies) {
                $target_agency_ids = array();
                foreach ($target_agencies as $agency) {
                    array_push($target_agency_ids,$agency->id());
                }

                $needsQuery = \Drupal::entityTypeManager()->getStorage('node')->getQuery();
                $matching_node_ids = $needsQuery->condition('type', 'needs')
                ->condition('status', 1)
                ->condition('field_approved', 1)
                ->condition('field_vibility', "Active")
                ->condition('field_categories.entity:taxonomy_term.tid', $target_category, 'IN')
                ->condition('field_agencies_list', $target_agency_ids, 'IN')
                ->execute();

                $all_matching_needs = \Drupal\node\Entity\Node::loadMultiple($matching_node_ids);

                if ($all_matching_needs) {
                    $need_owners = array();
                    foreach ($all_matching_needs as $need){
                        array_push($need_owners,$need->getOwner()->id());
                    }
                    $need_owners = array_unique($need_owners);
                    
                    foreach ($need_owners as $need_owner) {
                        $notificationService = \Drupal::service('notifications_widget.logger');
                        $message = array();
                        if ($node->field_status->value == "Pending") {
                            $message ['content'] = 'The Support [node:title] from [node:author] is in discussion';
                        }elseif ($node->field_status->value == "Fullfilled") {
                            $message ['content'] = 'The Support [node:title]  is Accepted';
                        }else {
                            $message ['content'] = 'The Support [node:title] by [node:author] is created';
                        }
                        $message['id'] =  $node->id();
                        $message['bundle']  = 'services';
                        $message['content_link'] = '[entity:url]';
                        $notificationService->logNotification($message, 'create', $node, $need_owner);
                    }
                }
            }
        }
    }
}


/**
 * Implements hook_theme().
 */
function weshare_theme($existing, $type, $theme, $path) {
    return [
        'support_list' => [
            'variables' => [
                'services' => NULL,
            ],
            'template' => 'support-list',
        ],
    ];
}

function weshare_form_user_register_form_alter(&$form, &$form_state, $form_id) {
    $form['account']['roles']['#title'] = t('Select User Role');
    $form['account']['roles']['#access'] = TRUE;
    $form['account']['roles']['#type'] = 'select';
    unset($form['account']['roles']['#options']['administrator']);
    unset($form['account']['roles']['#options']['content_editor']);
    unset($form['account']['roles']['#options']['authenticated']);
    unset($form['account']['roles']['#options']['superadmin']);
    $form['field_create_agency_or_company']['#states']['visible'][':input[name="roles"]']['value'] = 'agency_admin';
    
    // Pre-populate agency when agency admin creates new user
    $current_user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
    $role = $current_user->getRoles();
    if (in_array('agency_admin', $role)) {
        $agency = $current_user->get('field_agency_company')->getValue();
        $form['field_agency_company']['widget']['#default_value'] = $agency[0]['target_id'];        
        $form['field_agency_company']['#disabled'] = TRUE;
        $form['field_create_agency_or_company']['#access'] = FALSE;
    }

    if (in_array('agency_admin', $role) || in_array('administrator', $role)) {
        $form['field_approval_required']['widget']['#default_value'] = TRUE;
        $form['field_approval_required']['#disabled'] = TRUE;
    }

    $form['account']['mail']['#required'] = TRUE;
    $form['actions']['submit']['#submit'][] = 'weshare_user_register_form_submit';
}


/**
 * Submit handler function to auto-assign agency to a newly registered agency admin
 * This function also considers scenarios when agency admin tries to create an existing agency
 */
function weshare_user_register_form_submit(&$form, FormStateInterface $form_state) {
    $submitted_data = $form_state->getValues();
    $role = $submitted_data['roles'];
    if ($role == "agency_admin") {
        $agency_id = $submitted_data['field_agency_company'][0]['target_id'];
        if ($form['field_agency_company']['widget']['#options'][$agency_id] == "-Select Agency-") {
            $agency_exist = false;
            $new_agency = $submitted_data['field_create_agency_or_company'][0]['target_id'];
            $user = User::Load($submitted_data['uid']);
            $new_agency_id = NULL;

            if (is_array($new_agency)) {
                $new_agency_id = $new_agency['entity']->id();
            }elseif (is_int($new_agency) || is_string($new_agency)) {
                $new_agency_id = $new_agency;
                $agency_exist = true;
            }

            // If agency exists, set create agency field to NULL
            if ($agency_exist) {
                $user->set('field_create_agency_or_company', NULL);
            }

            // Auto assign agency to the newly registered agency admin
            if ($new_agency_id) {
                $user->get('field_agency_company')->setValue($new_agency_id);
            }

            $user->save();
        }
    }
}

// /**
//  * hide menu from anonymous user.
//  */
// function weshare_preprocess_menu__main(&$variables) {
//     if(\Drupal::currentUser()->isAnonymous()) {
//         unset($variables['items']);
//     }
// }

function weshare_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
    $storage = $form_state->getStorage();
    if (($form_id == 'views_exposed_form') && $storage['view']->id() === 'need_list' || $storage['view']->id() === 'service'){
        $form['back'] = array(
            '#type' => 'button',
            '#value' => t('Reset'),
            '#id' =>'reset',
            '#weight' => 100,
            '#attributes' => array(
              'onclick' => 'window.history.back();return false;',
            ),
        );
    }
    if(($form_id== 'views_exposed_form') && $storage['view']->id() ==='requesting_needs' || $storage['view']->id() === 'report' 
        || $storage['view']->id() === 'pending_needs' || $storage['view']->id() === 'pending_services' || $storage['view']->id() === 'provided'
        || $storage['view']->id() === 'providing_services' || $storage['view']->id() === 'received') {
        $form['actions']['submit']['#attributes']['class'][] = 'btn';
    }
  }

/**
 * Implements hook_menu_local_tasks_alter().
 */
function weshare_menu_local_tasks_alter(&$data, $route_name) {
    unset($data['tabs'][0]['shortcut.set_switch']);
    unset($data['tabs'][0]['entity.user.contact_form']);
}


function weshare_preprocess_block(&$variables){

    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node) {
        $nid = $node->id();
    } else {
        $nid = 0;
    }
    $variables['nodeid'] = $nid;

    $blockids = [
        'extra_field_block:node:needs:private_message_link',
        'extra_field_block:node:services:private_message_link',
    ];

    if (in_array($variables['elements']['#configuration'][id],$blockids) && $variables['elements']['content']['#url'] != null) {
        $url = &$variables['elements']['content']['#url'];
        $options = $url->getOptions();
        $options['query']['nid'] = $nid;
        $url->setOptions($options);
    }
}


/**
 * Implements hook_views_query_alter().
 * Logic to modify approval and rejected listing pages
 * to display need/support of their own agencies
 */
function weshare_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
    if($view->getTitle() == "Pending Services" || $view->getTitle() == "Pending Needs" || $view->getTitle() == "Rejected Needs" || $view->getTitle() == "Rejected Support" || $view->getTitle() == "Agency Members") {
        $current_user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
        $current_agency = $current_user->get('field_agency_company')->getValue();
        $current_agency = $current_agency[0]['target_id'];
        $query->addWhere('conditions', 'taxonomy_term_field_data_user__field_agency_company.tid', $current_agency, '=');
    }
}


/**
 * Logic for validating and authorizing before 
 * need/support is approved/rejected  
 */
function weshare_validate_approve_reject($nid) {
    $current_user = User::load(\Drupal::currentUser()->id());
    $role = $current_user->getRoles();

    if (in_array('agency_admin', $role) || in_array('administrator', $role)) {
        $agency = $current_user->get('field_agency_company')->getValue();
        if($agency){
        
            // agency id of the logged in user
            $logged_in_agency_id = $agency[0]['target_id'];
            
            $node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
            if($node) {
                $node_user_id = $node->getOwnerId();
                $node_user_agency = User::load($node_user_id)->get('field_agency_company')->getValue();
                
                // agency id of the creator of the node
                $node_user_agency_id = $node_user_agency ? $node_user_agency[0]['target_id'] : '';
                if ($logged_in_agency_id == $node_user_agency_id) {
                    // valid user
                    return ["valid", $node];
                }else{
                    // no rights to approve
                    return "unauthorised-user";
                }
            }else{
                // no node exists
                return "invalid-node";
            }
        }else{
            // no agency exists
            return "invalid-agency";
        }
    }else{
        // unauthorised access
        return "unauthorised-access";
    }
}


/**
 * Function to send notification to workers when need/support 
 * is approved/rejected.
 */
function _weshare_send_approved_rejected_notification (NodeInterface $node, $bundle, $status) {
    $notificationService = \Drupal::service('notifications_widget.logger');
    $current_user_name = User::load(\Drupal::currentUser()->id())->name->value;
    $type = ($bundle == "needs") ? "Need" : "Support";
    $status = ($status == "approved") ? "Approved" : "Rejected";
    $message_content = 'Your ' . $type . ' "[node:title]" has been ' . $status . ' by ' . $current_user_name;
    
    $message = array();
    $message['content'] = $message_content;
    $message['id'] =  $node->id();
    $message['bundle']  = $bundle;
    $message['content_link'] = '[entity:url]';
    $need_owner = $node->getOwnerId();
    $notificationService->logNotification($message, 'create', $node, $need_owner);
}


/**
 * Function to send notification to agency admin(s) when need/support 
 * is created by their workers.
 */
function _weshare_send_approval_required_notification (NodeInterface $node, $bundle) {
    $notificationService = \Drupal::service('notifications_widget.logger');
    $type = ($bundle == "needs") ? "Need" : "Support";
    $message_content = $type . ' "[node:title]" has been created by "[node:author]" and requires approval';
    $node_id = $node->id();
    $content_link = ($bundle == "needs") ? "/pending-needs" : "/pending-services";

    $node_user_agency = User::load(\Drupal::currentUser()->id())->get('field_agency_company')->getValue();
    $node_user_agency_id = $node_user_agency ? $node_user_agency[0]['target_id'] : '';

    if ($node_user_agency_id) {
        $usersQuery = \Drupal::entityTypeManager()->getStorage('user')->getQuery();
        $matching_admin_ids = $usersQuery->condition('status', 1)
        ->condition('field_agency_company', $node_user_agency_id)
        ->condition('roles', "agency_admin", 'IN')
        ->execute();

        $agency_admins = User::loadMultiple($matching_admin_ids);
        foreach($agency_admins as $agency_admin) {
            $notificationService = \Drupal::service('notifications_widget.logger');
            $message = array();
            $message['content'] = $message_content;
            $message['id'] =  $node_id;
            $message['bundle']  = $bundle;
            $message['content_link'] = $content_link;
            $admin_owner = $agency_admin->id();
            $notificationService->logNotification($message, 'create', $node, $admin_owner);
        }
    }
}

/**
 * Function to send notification to owner when user wants to fulfill a need 
 */
function weshare_send_pending_notification (NodeInterface $node, $bundle) {
    if ($node) {
        $notificationService = \Drupal::service('notifications_widget.logger');
        $current_user_name = User::load(\Drupal::currentUser()->id())->name->value;
        $message_content_needs = $current_user_name . ' wants to fulfill your need "[node:title]"';
        $message_content_service = $current_user_name . ' wants to accept your support "[node:title]"';
        $message_content = ($bundle == "needs") ? $message_content_needs : $message_content_service;
        
        $message = array();
        $message['content'] = $message_content;
        $message['id'] =  $node->id();
        $message['bundle']  = $bundle;
        $message['content_link'] = '[entity:url]';
        $node_owner = $node->getOwnerId();
        $notificationService->logNotification($message, 'create', $node, $node_owner);
    }
}
